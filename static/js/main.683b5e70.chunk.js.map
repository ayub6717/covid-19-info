{"version":3,"sources":["loading/Horizontal.gif","loading/Atom.gif","components/CardComponent/CardComponent.js","components/DataTableComponent/DataTableComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CardComponent","className","this","props","header","cases","Component","DataTableComponent","count","scope","Countries","map","country","key","Country","TotalConfirmed","TotalDeaths","TotalRecovered","NewConfirmed","length","src","Horizontal","alt","App","state","Global","bangladesh","axios","get","then","response","setState","data","atomLoading","Confirmed","Deaths","Recovered","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,wOCgB5BC,G,mLAXb,OACC,yBAAKC,UAAU,sBACd,yBAAKA,UAAU,eAAeC,KAAKC,MAAMC,QACzC,yBAAKH,UAAU,aACd,uBAAGA,UAAU,aAAaC,KAAKC,MAAME,a,GANdC,c,yBC4CbC,E,uKAzCb,IAAIC,EAAQ,EACZ,OACC,6BACC,2BAAOP,UAAU,wBAChB,2BAAOA,UAAU,WAChB,4BACC,wBAAIQ,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,WACA,wBAAIA,MAAM,OAAV,eACA,wBAAIA,MAAM,OAAV,gBACA,wBAAIA,MAAM,OAAV,mBACA,wBAAIA,MAAM,OAAV,eAGF,+BACEP,KAAKC,MAAMO,UAAUC,KAAI,SAACC,GAC1B,OACC,wBAAIC,MAAOL,GACV,wBAAIC,MAAM,OAAOD,GACjB,4BAAKI,EAAQE,SACb,4BAAKF,EAAQG,gBACb,4BAAKH,EAAQI,aACb,4BAAKJ,EAAQK,gBACb,4BAAKL,EAAQM,oBAMe,IAAhChB,KAAKC,MAAMO,UAAUS,OACrB,yBAAKlB,UAAU,YACd,yBAAKmB,IAAKC,IAAYC,IAAI,mBAG3B,Q,GApC4BhB,a,iCCkGlBiB,E,4MA9FdC,MAAQ,CACPC,OAAQ,GACRf,UAAW,GACXgB,WAAY,I,kEAGQ,IAAD,OACnBC,IAAMC,IAAI,0CAA0CC,MAAK,SAACC,GACzD,EAAKC,SAAS,CACbN,OAAQK,EAASE,UAInBL,IACEC,IAAI,uDACJC,MAAK,SAACC,GACN,EAAKC,SAAS,CACbL,WAAYI,EAASE,KAAKF,EAASE,KAAKb,OAAS,QAInDQ,IAAMC,IAAI,sCAAsCC,MAAK,SAACC,GACtD,EAAKC,SAAS,CACbrB,UAAWoB,EAASE,KAAKtB,iB,+BAO3B,OAAgC,IAA7BR,KAAKsB,MAAMC,OAAON,QAAiD,IAAjCjB,KAAKsB,MAAME,WAAWP,OAEzD,yBAAKlB,UAAU,YACd,yBAAKmB,IAAKa,IAAaX,IAAI,aAK7B,yBAAKrB,UAAU,iBACd,oDACA,2EACA,yBAAKA,UAAU,OACd,yBAAKA,UAAU,YACd,qCAED,yBAAKA,UAAU,YACd,kBAAC,EAAD,CACCI,MAAOH,KAAKsB,MAAMC,OAAOV,eACzBX,OAAO,uBAGT,yBAAKH,UAAU,YACd,kBAAC,EAAD,CACCI,MAAOH,KAAKsB,MAAMC,OAAOT,YACzBZ,OAAO,YAGT,yBAAKH,UAAU,YACd,kBAAC,EAAD,CACCI,MAAOH,KAAKsB,MAAMC,OAAOR,eACzBb,OAAO,gBAIV,yBAAKH,UAAU,OACd,yBAAKA,UAAU,YACd,0CAED,yBAAKA,UAAU,YACd,kBAAC,EAAD,CACCI,MAAOH,KAAKsB,MAAME,WAAWQ,UAC7B9B,OAAO,uBAGT,yBAAKH,UAAU,YACd,kBAAC,EAAD,CACCI,MAAOH,KAAKsB,MAAME,WAAWS,OAC7B/B,OAAO,YAGT,yBAAKH,UAAU,YACd,kBAAC,EAAD,CACCI,MAAOH,KAAKsB,MAAME,WAAWU,UAC7BhC,OAAO,gBAKV,kBAAC,EAAD,CAAoBM,UAAWR,KAAKsB,MAAMd,iB,GAzF5BJ,aCKE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.683b5e70.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Horizontal.aebe5cd2.gif\";","module.exports = __webpack_public_path__ + \"static/media/Atom.644216a6.gif\";","import React, { Component } from \"react\";\nimport \"./CardComponent.css\";\n\nclass CardComponent extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"card bg-light mb-3\">\n\t\t\t\t<div className=\"card-header\">{this.props.header}</div>\n\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t<p className=\"card-text\">{this.props.cases}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default CardComponent;\n","import React, { Component } from \"react\";\nimport \"./DataTableComponent.css\";\nimport Horizontal from \"../../loading/Horizontal.gif\";\n\nclass DataTableComponent extends Component {\n\trender() {\n\t\tlet count = 0;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<table className=\"table table-bordered\">\n\t\t\t\t\t<thead className=\"Heading\">\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th scope=\"col\">#</th>\n\t\t\t\t\t\t\t<th scope=\"col\">Country</th>\n\t\t\t\t\t\t\t<th scope=\"col\">Total Cases</th>\n\t\t\t\t\t\t\t<th scope=\"col\">Total Deaths</th>\n\t\t\t\t\t\t\t<th scope=\"col\">Total Recovered</th>\n\t\t\t\t\t\t\t<th scope=\"col\">New Cases</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{this.props.Countries.map((country) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<tr key={++count}>\n\t\t\t\t\t\t\t\t\t<th scope=\"row\">{count}</th>\n\t\t\t\t\t\t\t\t\t<td>{country.Country}</td>\n\t\t\t\t\t\t\t\t\t<td>{country.TotalConfirmed}</td>\n\t\t\t\t\t\t\t\t\t<td>{country.TotalDeaths}</td>\n\t\t\t\t\t\t\t\t\t<td>{country.TotalRecovered}</td>\n\t\t\t\t\t\t\t\t\t<td>{country.NewConfirmed}</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t\t{this.props.Countries.length === 0 ? (\n\t\t\t\t\t<div className=\"loading2\">\n\t\t\t\t\t\t<img src={Horizontal} alt=\"CoronaLoading\" />\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t\"\"\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default DataTableComponent;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CardComponent from \"./components/CardComponent/CardComponent\";\nimport DataTableComponent from \"./components/DataTableComponent/DataTableComponent\";\nimport axios from \"axios\";\nimport atomLoading from './loading/Atom.gif';\n\nclass App extends Component {\n\tstate = {\n\t\tGlobal: [],\n\t\tCountries: [],\n\t\tbangladesh: [],\n\t};\n\n\tcomponentDidMount() {\n\t\taxios.get(\"https://api.covid19api.com/world/total\").then((response) => {\n\t\t\tthis.setState({\n\t\t\t\tGlobal: response.data,\n\t\t\t});\n\t\t});\n\n\t\taxios\n\t\t\t.get(\"https://api.covid19api.com/total/country/bangladesh\")\n\t\t\t.then((response) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tbangladesh: response.data[response.data.length - 1],\n\t\t\t\t});\n\t\t\t});\n\n\t\t\taxios.get(\"https://api.covid19api.com/summary\").then((response) => {\n\t\t\tthis.setState({\n\t\t\t\tCountries: response.data.Countries,\n\t\t\t});\n\t\t});\n\t}\n\n\trender() {\n\n\t\tif(this.state.Global.length === 0 && this.state.bangladesh.length === 0) {\n\t\t\treturn (\n\t\t\t\t<div className=\"loading1\">\n\t\t\t\t\t<img src={atomLoading} alt=\"Loading\"/>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"App container\">\n\t\t\t\t<h2>Covid-19 Information</h2>\n\t\t\t\t<p>If you don't get all the data please Refresh</p>\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-md-2\">\n\t\t\t\t\t\t<p>World</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-md-3\">\n\t\t\t\t\t\t<CardComponent\n\t\t\t\t\t\t\tcases={this.state.Global.TotalConfirmed}\n\t\t\t\t\t\t\theader=\"Coronavirus Cases\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-md-3\">\n\t\t\t\t\t\t<CardComponent\n\t\t\t\t\t\t\tcases={this.state.Global.TotalDeaths}\n\t\t\t\t\t\t\theader=\"Deaths\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-md-3\">\n\t\t\t\t\t\t<CardComponent\n\t\t\t\t\t\t\tcases={this.state.Global.TotalRecovered}\n\t\t\t\t\t\t\theader=\"Recovered\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-md-2\">\n\t\t\t\t\t\t<p>Bangladesh</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-md-3\">\n\t\t\t\t\t\t<CardComponent\n\t\t\t\t\t\t\tcases={this.state.bangladesh.Confirmed}\n\t\t\t\t\t\t\theader=\"Coronavirus Cases\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-md-3\">\n\t\t\t\t\t\t<CardComponent\n\t\t\t\t\t\t\tcases={this.state.bangladesh.Deaths}\n\t\t\t\t\t\t\theader=\"Deaths\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-md-3\">\n\t\t\t\t\t\t<CardComponent\n\t\t\t\t\t\t\tcases={this.state.bangladesh.Recovered}\n\t\t\t\t\t\t\theader=\"Recovered\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<DataTableComponent Countries={this.state.Countries} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}